solve(A,b)
A = rbind(cbind(-4, 3, 2), cbind(3,-2,1), cbind(2,1,-5))
b = rbind(6, 2, 1)
solve(A,b)
A = rbind(cbind(-4, 3, 2), cbind(3,-2,1), cbind(2,1,-6))
b = rbind(6, 2, 1)
solve(A,b)
A=matrix(c(0,1,0,0,0,1,0,0,0),3,3)
A
A%*%A%*%A
(diag(3)-A)%*%(diag(3)+A+A%*%A)
9/6+1/13
library(MASS)
fractions(9/6+1/13)
fractions(3/12+1/13)
fractions(11/4+2/!3)
fractions(11/4+2/13)
fractions(9/4+1/2)
fractions(9/12+2/13)
fractions(9/4+1/13)
fractions(3/2+2/13)
fractions(3/2+18/13)
fractions(1/4+18/13)
fractions(1/2+9/13)
fractions(3/4+9/13)
fractions(1+9/13)
38/13
41/26
11/4
121/52
34/13
75/26
18/13
85/52
43/26
75/52
22/13
41/26
11/4
121/52
22/13
31/26
75/52
fractions(3/2+2/13)
fractions(1/2+9/13)
31/26
43/26
9/13+3/4
fractions(9/13+3/4)
22/13
31/26
fractions(9/13+1/2)
31/26
3/2
(29+13*15/52)/5
FRACTIONS((29+13*15/52)/5)
fractions((29+13*15/52)/5)
A=matrix(c(1,0,2,-4,3,8,2,5,-4),3,3)
b=matrix(c(3,-7,-3),3,1)
inv(A)%*%b
sove(A)%*%b
solve(A)%*%b
A
b
15/104
b
solve(A)
solve(A)%*%b
fractions(solve(A)%*%b)
library(matlib)
A=matrix(c(2,3,4,3,2,1,3,3,2),3,3)
b=matrix(c(25,24,21),3,1)
echelon(A,b)
19/5
25*3
75-48
-50+21
27*3
27*2
54-81
21/5
27-16
11/5
27-8
19/5
A
b
125-81
-81/10+25/2
22/10
16/5
A=matrix(c(2,3,1,7,9,5,3,4,3),3,3)
solve(A)
2/3
4/3
5/3
7/3
1/3
B=matrix(c(5,1,-5,3,-3,2,1,-2,1),3,3)
B
solve(B)
fractions(solve(B))
fraction(solve(B))
library(MASS)
fractions(solve(B))
C=matrix(c(-8,-5,-2,3,9,15,0,0,0),3,3)
C
solve(B)%*%C
fractions(solve(B)%*%C)
B=matrix(c(2,4,5,-3,-5,-7,1,2,3),3,3)
C=matrix(c(9,1,1,7,1,1,6,2,1),3,3)
fractions(solve(B))
fractions(solve(C))
D=matrix(c(2,18,23,0,12,15,-2,9,11),3,3)
solve(B)%*%D%*%solve(C)
A=matrix(c(-1,2,1,-7,15,3,-3,6,2))
solve(A)
A=matrix(c(-1,2,1,-7,15,3,-3,6,2),3,3)
solve(A)
rm(list=ls())
library(MASS)
library(expm)
source("gmm_rho.R")
source("ghk_rho.R")
setwd("~/Documents/Ph.D/Econ 715 - Econometrics Methods/Problem sets/PS1/")
setwd("~/Documents/Ph.D/Econ 715 - Econometric Methods/Problem sets/PS1/")
source("gmm_rho.R")
source("ghk_rho.R")
set.seed(1234)
sims=1000
n=500
rho=NULL
for(i in 1:sims){
p=optimize(gmm_rho,interval=c(0,1), n=n)
rho[i]=p$minimum
}
mean(rho)
mean(rho)-0.5
sd(rho)
j=1
n=ni[j]
rhom=NULL
ni=c(1000,2000)
n=ni[j]
rhom=NULL
rhok=NULL
for(i in 1:sims){
p=optimize(gmm_rho,interval=c(0,1), n=n)
rhom[i]=p$minimum
p=optimize(ghk_rho,interval=c(0,1), n=n)
rhok[i]=p$minimum
}
mean(rhom)
mean(rhok)
sd(rhom)
sd(rhok)
j=2
n=ni[j]
rhom=NULL
rhok=NULL
for(i in 1:sims){
p=optimize(gmm_rho,interval=c(0,1), n=n)
rhom[i]=p$minimum
p=optimize(ghk_rho,interval=c(0,1), n=n)
rhok[i]=p$minimum
}
mean(rhom)
mean(rhok)
sd(rhok)
rm(list=ls())
setwd("~/Documents/Ph.D/Econ 761 - Industrial Organization Theory/Problem sets/PS2/")
source("functions.R")
set.seed(111)
#Part 2.a and 2.b
#Data generating process
c0=1
c1=0.9
xi=0
f=1
b0=1
b1=0
eta=0
cities=1000
N=ceiling(10*runif(cities))
collusion=as.numeric(c((N[1:500]<=8), rep(FALSE, 500)))
LernerCN=c1/N
HHI=1/N
Elasticity=rep(1/c1,cities)
LernerM=c1
Lerner=collusion*LernerM+(1-collusion)*LernerCN
oblerner=log(Lerner)+0.1*(runif(cities)-0.5)
loghhi=log(HHI)
#Part 2.c
data = data.frame(oblerner, loghhi, collusion)
#Regressions
col = lm(oblerner~loghhi, data=data[1:500,])
cou = lm(oblerner~loghhi, data=data[501:1000,])
all = lm(oblerner~loghhi, data=data)
#Part 2.c
#Hypothesis testing
#Collusion
sumcol=summary(col)$coefficients
tcol=abs(sumcol[2,1]-1)/sumcol[2,2]
rejectcol=(tcol>=qnorm(0.95))
#Cournot
sumcou=summary(cou)$coefficients
tcou=abs(sumcou[2,1]-1)/sumcou[2,2]
rejectcou=(tcou>=qnorm(0.95))
#All
sumall=summary(all)$coefficients
tall=abs(sumall[2,1]-1)/sumall[2,2]
rejectall=(tall>=qnorm(0.95))
summary(col)
#Part 2.d
a0=3
a1=1
v=0
Lerner=NULL
hhi=NULL
Elasticity=NULL
for(i in 1:cities){
if(collusion[i]==T){
Q=(a0+v-b0-eta)/(2*a1)
q=Q/N[i]
q=rep(1, N[i])
p=0.5*(a0+v+b0+eta)
l1=lerner(p=p, mc=b0+eta)
Lerner[i]=l1
h=HHI(q=q, Q=Q)
hhi[i]=h
Elasticity=rbind(Elasticity,(1/a1)*((a0-a1*Q+v)/Q))
}else{
q=(a0+v-b0-eta)/(a1*(N[i]+1))
Q=N[i]*q
q=rep(q, N[i])
p=(a0+v+N[i]*(b0+eta))/(N[i]+1)
l1=lerner(p=p, mc=b0+eta)
Lerner[i]=l1
h=HHI(q=q, Q=Q)
hhi[i]=h
Elasticity=rbind(Elasticity,abs((-1/a1)*((a0-a1*Q+v)/Q)))
}
}
oblerner=log(Lerner)+runif(cities,-0.05, 0.05)
loghhi=log(hhi)
data = data.frame(oblerner, loghhi, collusion)
#Regressions
col = lm(oblerner~loghhi, data=data[1:500,])
cou = lm(oblerner~loghhi, data=data[501:1000,])
all = lm(oblerner~loghhi, data=data)
#Part 2.c
#Hypothesis testing
#Collusion
sumcol=summary(col)$coefficients
tcol=abs(sumcol[2,1]-1)/sumcol[2,2]
rejectcol=(tcol>=qnorm(0.95))
#Cournot
sumcou=summary(cou)$coefficients
tcou=abs(sumcou[2,1]-1)/sumcou[2,2]
rejectcou=(tcou>=qnorm(0.95))
#All
sumall=summary(all)$coefficients
tall=abs(sumall[2,1]-1)/sumall[2,2]
rejectall=(tall>=qnorm(0.95))
#Part 3.a
a0=5
a1=1
f=1
b0=1
b1=0
cities=1000
eta=0
v=runif(cities,-1,1)
N=NULL
for(i in 1:cities){N=rbind(N,((a0+v[i]-b0-eta)/sqrt(a1*f))-1)}
Lerner=NULL
hhi=NULL
Elasticity=NULL
for(i in 1:cities){
q=(a0+v[i]-b0-eta)/(a1*(N[i]+1))
Q=N[i]*q
q=rep(q, N[i])
p=(a0+v[i]+N[i]*(b0+eta))/(N[i]+1)
l1=lerner(p=p, mc=b0+eta)
Lerner=rbind(Lerner,l1)
h=HHI(q=q, Q=Q)
hhi=rbind(hhi,h)
Elasticity=rbind(Elasticity,abs((-1/a1)*((a0-a1*Q+v[i])/Q)) )
}
oblerner=log(Lerner)+runif(cities, -0.05, 0.05)
loghhi=log(hhi)
data = data.frame(oblerner, loghhi)
#Regressions
end_1 = lm(oblerner~loghhi, data=data)
#Part 3.b
eta=runif(cities,-1,1)
v=0
N=NULL
for(i in 1:cities){N=rbind(N,((a0+v-b0-eta[i])/sqrt(a1*f))-1)}
Lerner=NULL
hhi=NULL
Elasticity=NULL
for(i in 1:cities){
q=(a0+v-b0-eta[i])/(a1*(N[i]+1))
Q=N[i]*q
q=rep(q, N[i])
p=(a0+v+N[i]*(b0+eta[i]))/(N[i]+1)
l1=lerner(p=p, mc=b0+eta[i])
Lerner=rbind(Lerner,l1)
h=HHI(q=q, Q=Q)
hhi=rbind(hhi,h)
Elasticity=rbind(Elasticity,abs((-1/a1)*((a0-a1*Q+v)/Q))  )
}
oblerner=log(Lerner)+runif(cities, -0.05, 0.05)
loghhi=log(hhi)
data = data.frame(oblerner, loghhi)
#Regressions
end_2 = lm(oblerner~loghhi, data=data)
###################
## Problem set 2 ##
## Natalia Serna ##
###################
rm(list=ls())
setwd("~/Documents/Ph.D/Econ 761 - Industrial Organization Theory/Problem sets/PS2/")
source("functions.R")
set.seed(111)
#Part 2.a and 2.b
#Data generating process
c0=1
c1=0.9
xi=0
f=1
b0=1
b1=0
eta=0
cities=1000
N=ceiling(10*runif(cities))
collusion=as.numeric(c((N[1:500]<=8), rep(FALSE, 500)))
LernerCN=c1/N
HHI=1/N
Elasticity=rep(1/c1,cities)
LernerM=c1
Lerner=collusion*LernerM+(1-collusion)*LernerCN
oblerner=log(Lerner)+0.1*(runif(cities)-0.5)
loghhi=log(HHI)
#Part 2.c
data = data.frame(oblerner, loghhi, collusion)
#Regressions
col = lm(oblerner~loghhi, data=data[1:500,])
cou = lm(oblerner~loghhi, data=data[501:1000,])
all = lm(oblerner~loghhi, data=data)
#Part 2.c
#Hypothesis testing
#Collusion
sumcol=summary(col)$coefficients
tcol=abs(sumcol[2,1]-1)/sumcol[2,2]
rejectcol=(tcol>=qnorm(0.95))
#Cournot
sumcou=summary(cou)$coefficients
tcou=abs(sumcou[2,1]-1)/sumcou[2,2]
rejectcou=(tcou>=qnorm(0.95))
#All
sumall=summary(all)$coefficients
tall=abs(sumall[2,1]-1)/sumall[2,2]
rejectall=(tall>=qnorm(0.95))
#Part 2.d
a0=3
a1=1
v=0
Lerner=NULL
hhi=NULL
Elasticity=NULL
for(i in 1:cities){
if(collusion[i]==T){
Q=(a0+v-b0-eta)/(2*a1)
q=Q/N[i]
q=rep(1, N[i])
p=0.5*(a0+v+b0+eta)
l1=lerner(p=p, mc=b0+eta)
Lerner[i]=l1
h=HHI(q=q, Q=Q)
hhi[i]=h
Elasticity=rbind(Elasticity,(1/a1)*((a0-a1*Q+v)/Q))
}else{
q=(a0+v-b0-eta)/(a1*(N[i]+1))
Q=N[i]*q
q=rep(q, N[i])
p=(a0+v+N[i]*(b0+eta))/(N[i]+1)
l1=lerner(p=p, mc=b0+eta)
Lerner[i]=l1
h=HHI(q=q, Q=Q)
hhi[i]=h
Elasticity=rbind(Elasticity,abs((-1/a1)*((a0-a1*Q+v)/Q)))
}
}
oblerner=log(Lerner)+runif(cities,-0.05, 0.05)
loghhi=log(hhi)
data = data.frame(oblerner, loghhi, collusion)
#Regressions
col = lm(oblerner~loghhi, data=data[1:500,])
cou = lm(oblerner~loghhi, data=data[501:1000,])
all = lm(oblerner~loghhi, data=data)
#Part 2.c
#Hypothesis testing
#Collusion
sumcol=summary(col)$coefficients
tcol=abs(sumcol[2,1]-1)/sumcol[2,2]
rejectcol=(tcol>=qnorm(0.95))
#Cournot
sumcou=summary(cou)$coefficients
tcou=abs(sumcou[2,1]-1)/sumcou[2,2]
rejectcou=(tcou>=qnorm(0.95))
#All
sumall=summary(all)$coefficients
tall=abs(sumall[2,1]-1)/sumall[2,2]
rejectall=(tall>=qnorm(0.95))
#Part 3.a
a0=5
a1=1
f=1
b0=1
b1=0
cities=1000
eta=0
v=runif(cities,-1,1)
N=NULL
for(i in 1:cities){N=rbind(N,((a0+v[i]-b0-eta)/sqrt(a1*f))-1)}
Lerner=NULL
hhi=NULL
Elasticity=NULL
for(i in 1:cities){
q=(a0+v[i]-b0-eta)/(a1*(N[i]+1))
Q=N[i]*q
q=rep(q, N[i])
p=(a0+v[i]+N[i]*(b0+eta))/(N[i]+1)
l1=lerner(p=p, mc=b0+eta)
Lerner=rbind(Lerner,l1)
h=HHI(q=q, Q=Q)
hhi=rbind(hhi,h)
Elasticity=rbind(Elasticity,abs((-1/a1)*((a0-a1*Q+v[i])/Q)) )
}
oblerner=log(Lerner)+runif(cities, -0.05, 0.05)
loghhi=log(hhi)
data = data.frame(oblerner, loghhi)
#Regressions
end_1 = lm(oblerner~loghhi, data=data)
#Part 3.b
eta=runif(cities,-1,1)
v=0
N=NULL
for(i in 1:cities){N=rbind(N,((a0+v-b0-eta[i])/sqrt(a1*f))-1)}
Lerner=NULL
hhi=NULL
Elasticity=NULL
for(i in 1:cities){
q=(a0+v-b0-eta[i])/(a1*(N[i]+1))
Q=N[i]*q
q=rep(q, N[i])
p=(a0+v+N[i]*(b0+eta[i]))/(N[i]+1)
l1=lerner(p=p, mc=b0+eta[i])
Lerner=rbind(Lerner,l1)
h=HHI(q=q, Q=Q)
hhi=rbind(hhi,h)
Elasticity=rbind(Elasticity,abs((-1/a1)*((a0-a1*Q+v)/Q))  )
}
oblerner=log(Lerner)+runif(cities, -0.05, 0.05)
loghhi=log(hhi)
data = data.frame(oblerner, loghhi)
#Regressions
end_2 = lm(oblerner~loghhi, data=data)
rm(list=ls())
setwd("~/Documents/Ph.D/Econ 761 - Industrial Organization Theory/Problem sets/PS2/")
source("functions.R")
set.seed(111)
#Data generating process
c0=1
c1=0.9
xi=0
f=1
b0=1
b1=0
eta=0
cities=1000
N=ceiling(10*runif(cities))
collusion=as.numeric(c((N[1:500]<=8), rep(FALSE, 500)))
LernerCN=c1/N
HHI=1/N
Elasticity=rep(1/c1,cities)
LernerM=c1
Lerner=collusion*LernerM+(1-collusion)*LernerCN
oblerner=log(Lerner)+0.1*(runif(cities)-0.5)
loghhi=log(HHI)
#Part 2.c
data = data.frame(oblerner, loghhi, collusion)
#Regressions
col = lm(oblerner~loghhi, data=data[1:500,])
cou = lm(oblerner~loghhi, data=data[501:1000,])
all = lm(oblerner~loghhi, data=data)
#Part 2.c
#Hypothesis testing
#Collusion
sumcol=summary(col)$coefficients
tcol=abs(sumcol[2,1]-1)/sumcol[2,2]
rejectcol=(tcol>=qnorm(0.95))
#Cournot
sumcou=summary(cou)$coefficients
tcou=abs(sumcou[2,1]-1)/sumcou[2,2]
rejectcou=(tcou>=qnorm(0.95))
#All
sumall=summary(all)$coefficients
tall=abs(sumall[2,1]-1)/sumall[2,2]
rejectall=(tall>=qnorm(0.95))
